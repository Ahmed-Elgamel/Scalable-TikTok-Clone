version: '3.8'

services:

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - message-queue-network
#######################################################################################################################################
  kafka:
    image: bitnami/kafka:2.7.0  # Older version of Kafka that uses Zookeeper
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - message-queue-network
#######################################################################################################################################
  mongodb:
    image: mongo
    container_name: mongo-container
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: video_metadata_db
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongodb_data:/data
    networks:
      - mongodb-network
#######################################################################################################################################
  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_SERVER: mongodb
    networks:
      - mongodb-network
#######################################################################################################################################
  minio:
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - "9000:9000"   # API port
      - "9001:9001"   # Web UI
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - minio-network
#######################################################################################################################################
  video-ms:
    image: video-ms:latest
    build:
      context: ./VideoService
      dockerfile: Dockerfile
    container_name: video-ms-container
    ports:
      - "8080:8080"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
      MINIO_ENDPOINT: http://minio:9000
    depends_on:
      - minio
    networks:
      - minio-network
      - mongodb-network
      - message-queue-network
#######################################################################################################################################
  newsfeed-ms:
    image: newsfeed-ms:latest
    build:
      context: ./News-Feed-Service
      dockerfile: Dockerfile
    container_name: newsfeed-ms-container
    ports:
      - "8082:8080"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - message-queue-network
#######################################################################################################################################
volumes:
  minio_data:
  mongodb_data:
#######################################################################################################################################
networks:
  minio-network:
    driver: bridge
  mongodb-network:
    driver: bridge
  message-queue-network:
    driver: bridge



