version: '3.8'

services:
  redis:
    image: redis
    container_name: redis-server
    ports:
      - "6380:6379"  # Host port:Container port
    networks:
      - redis-net
#######################################################################################################################################
  cassandra:
    image: cassandra:latest
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
#      - MAX_HEAP_SIZE=4G
#      - HEAP_NEWSIZE=800M
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - cassandra-net
    healthcheck:
      test: [ "CMD-SHELL", "cqlsh -e 'DESCRIBE KEYSPACES' || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
#######################################################################################################################################
#  cassandra-init:
#    image: cassandra:latest
#    depends_on:
#        cassandra:
#          condition: service_healthy
#    volumes:
#      - ./News-Feed-Service/init.cql:/init_news.cql
#      - ./VideoService/init.cql:/init_video.cql
#    entrypoint: [ "sh", "-c", "sleep 30 && cqlsh cassandra -f /init_news.cql && cqlsh cassandra -f /init_video.cql" ]
#    networks:
#      - cassandra-net
#    healthcheck:
#      test: [ "CMD", "cqlsh", "cassandra", "-e", "DESCRIBE KEYSPACES" ]
#      interval: 10s
#      retries: 10
#      timeout: 5s
#######################################################################################################################################
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - message-queue-network
#######################################################################################################################################
  kafka:
    image: bitnami/kafka:2.7.0  # Older version of Kafka that uses Zookeeper
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - message-queue-network
#######################################################################################################################################
  mongodb:
    image: mongo
    container_name: mongo-container
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: video_metadata_db
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongodb_data:/data
    networks:
      - mongodb-network
#######################################################################################################################################
  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_SERVER: mongodb
    networks:
      - mongodb-network
#######################################################################################################################################
  minio:
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - "9000:9000"   # API port
      - "9001:9001"   # Web UI
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - minio-network
#######################################################################################################################################
  video-ms:
    image: video-ms:latest
    build:
      context: ./VideoService
      dockerfile: Dockerfile
    container_name: video-ms-container
    ports:
      - "8080:8080"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
      MINIO_ENDPOINT: http://minio:9000
      NEWSFEED_SERVICE_URL: http://newsfeed-ms-container:8080/newsFeed
    depends_on:
      minio:
        condition: service_started
      kafka:
        condition: service_started
      cassandra:
        condition: service_healthy
      mongodb:
        condition: service_started
#      cassandra-init:
#        condition: service_healthy
    networks:
      - minio-network
      - mongodb-network
      - message-queue-network
      - cassandra-net
      - eureka-network
    volumes:
      - /Users/ahmedhamed/dev/scalable/FinalProject-31-A-PLUS-ISA/testMedia:/opt/videos
#######################################################################################################################################
  newsfeed-ms:
    image: newsfeed-ms:latest
    build:
      context: ./News-Feed-Service
      dockerfile: Dockerfile
    container_name: newsfeed-ms-container
    ports:
      - "8082:8080"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      FOLLOW_SERVICE_URL: http://follow-ms-container:8080/api/follow
#      SPRING_DATA_CASSANDRA_CONTACT_POINTS: cassandra
#      SPRING_DATA_CASSANDRA_PORT: 9042
#      SPRING_DATA_CASSANDRA_KEYSPACE_NAME: testKeySpace
#      SPRING_REDIS_HOST: redis-server
#      SPRING_REDIS_PORT: 6379
    depends_on:
      kafka:
        condition: service_started
      cassandra:
        condition: service_healthy
#      cassandra-init:
#        condition: service_healthy
      redis:
        condition: service_started

    networks:
      - message-queue-network
      - cassandra-net
      - redis-net
      - eureka-network
#######################################################################################################################################
  user-ms:
    image: user-ms:latest
    build:
      context: ./UserService
      dockerfile: Dockerfile
    container_name: user-ms-container
    networks:
      - user-service-network
      - eureka-network
    depends_on:
      - postgres
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/user
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 1234
      NEWSFEED_SERVICE_URL: http://newsfeed-ms-container:8080/newsFeed
    ports:
      - "8083:8080"
  #######################################################################################################################################
  postgres:
    image: postgres
    container_name: postgres_db
    networks:
      - user-service-network
    environment:
      POSTGRES_DB: user
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
#######################################################################################################################################
  eureka-server:
    image: eureka-server:latest
    build:
      context: ./Service-Registry
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - eureka-network
    environment:
      - EUREKA_INSTANCE_HOSTNAME=eureka-server
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
    restart: always
#######################################################################################################################################
  api-gateway:
    image: api-gateway:latest
    build:
      context: ./API-Gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8084:8080"
    networks:
      - eureka-network
    environment:
      VIDEO_SERVICE_URL: http://video-ms-container:8080
      USER_SERVICE_URL: http://user-ms-container:8080
      FOLLOW_SERVICE_URL: http://follow-ms-container:8080
      NEWSFEED_SERVICE_URL: http://newsfeed-ms-container:8080
#      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
#      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true

    depends_on:
      - eureka-server
      - user-ms
      - video-ms
      - newsfeed-ms
    restart: always
#######################################################################################################################################
  follow-service:
    image: follow-ms:latest
    build: ./FollowService
    container_name: follow-ms-container
    ports:
      - "8085:8080"
    environment:
      - MONGO_URI=mongodb://root:example@mongo-container:27017/follow_service_db?authSource=admin
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - mongodb
    networks:
      - mongodb-network
      - message-queue-network
      - eureka-network
#######################################################################################################################################
  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./Monitoring-Logging-Stack/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#######################################################################################################################################
  grafana:
    image: grafana/grafana:9.5.2
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./Monitoring-Logging-Stack/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
#######################################################################################################################################
volumes:
  minio_data:
  mongodb_data:
  cassandra_data:
  postgres_data:
#######################################################################################################################################
networks:
  minio-network:
    driver: bridge
  mongodb-network:
    driver: bridge
  message-queue-network:
    driver: bridge
  cassandra-net:
    driver: bridge
  redis-net:
    driver: bridge
  user-service-network:
    driver: bridge
  eureka-network:
    driver: bridge




 